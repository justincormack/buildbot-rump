# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from slaves import slaves
def slmap(p): return BuildSlave(p[0], p[1]) 
c['slaves'] = map(slmap, slaves)

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9990

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/rumpkernel/buildrump.sh.git',
        workdir='gitpoller-workdir', branches=['master','testsrc'],
        pollinterval=60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["ubuntu32", "ubuntu64", "netbsd32", "netbsd64", "arm", "ppc", "ppc64", "mips-o32", "freebsd9", "freebsd", "openbsd", "android-arm", "musl64", "clang-ubuntu64"]))
#c['schedulers'].append(ForceScheduler(
#                            name="force",
#                            builderNames=["runtests-glibc-x64", "runtests-glibc-x86", "runtests-glibc-arm", "runtests-glibc-ppc", "globals", "ctest-linux-x64", "ctest-linux-x86", "ctest-linux-ppc", "runtests-rump-linux-x64", "runtests-rump-linux-x86", "runtests-rump-linux-arm", "runtests-rump-linux-ppc", "runtests-netbsd-x86", "runtests-rump-netbsd-x86", "ctest-netbsd-x86"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
factory.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factory.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factory.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "src"], timeout=3600))
factory.addStep(ShellCommand(command=["./buildrump.sh", "checkout", "fullbuild", "tests"], timeout=4800))
#factory.addStep(Git(repourl='https://github.com/justincormack/ljsyscall.git', mode='full', workdir='buildlj', timeout=2400))
#factory.addStep(ShellCommand(env={"LD_LIBRARY_PATH":"../build/rump/lib"},workdir="buildlj",command=["luajit", "test/test.lua", "rump"]))

factoryopen = BuildFactory()
factoryopen.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryopen.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryopen.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "src"], timeout=3600))
factoryopen.addStep(ShellCommand(env={"CC":"egcc"}, command=["./buildrump.sh", "checkout", "fullbuild", "tests"], timeout=4800))

factoryclang = BuildFactory()
factoryclang.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryclang.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryclang.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "src"], timeout=3600))
factoryclang.addStep(ShellCommand(command=["./buildrump.sh", "checkout", "fullbuild", "tests"], timeout=4800))
factoryclang.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","CC":"clang"}, command=["./buildrump.sh", "checkout", "fullbuild", "tests"], timeout=4800))

factory32 = BuildFactory()
factory32.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factory32.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factory32.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "src"], timeout=3600))
factory32.addStep(ShellCommand(command=["./buildrump.sh", "-F", "ACLFLAGS=-m32", "checkout", "fullbuild", "tests"], timeout=4800))

factorymips = BuildFactory()
factorymips.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factorymips.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factorymips.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "src"], timeout=3600))
factorymips.addStep(ShellCommand(command=["./buildrump.sh", "-F", "ACFLAGS=-march=mips3", "-F", "ACLFLAGS=-mabi=32", "checkout", "fullbuild", "tests"], timeout=4800))

factorygcc = BuildFactory()
factorygcc.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factorygcc.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factorygcc.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "src"], timeout=3600))
factorygcc.addStep(ShellCommand(env={"CC":"/usr/local/bin/gcc47","AR":"/usr/bin/ar","NM":"/usr/bin/nm","OBJCOPY":"/usr/bin/objcopy"},command=["./buildrump.sh", "checkout", "fullbuild", "tests"], timeout=4800))

factoryandroidarm = BuildFactory()
factoryandroidarm.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryandroidarm.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryandroidarm.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "src"], timeout=3600))
factoryandroidarm.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","CC":"arm-linux-androideabi-gcc"}, command=["./buildrump.sh", "-V", "MKPIC=no", "checkout", "fullbuild"], timeout=4800))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="ubuntu64",
      slavenames=["ubuntu64"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="clang-ubuntu64",
      slavenames=["ubuntu64"],
      factory=factoryclang))
c['builders'].append(
    BuilderConfig(name="android-arm",
      slavenames=["ubuntu64"],
      factory=factoryandroidarm))
c['builders'].append(
    BuilderConfig(name="ubuntu32",
      slavenames=["ubuntu32"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="netbsd64",
      slavenames=["netbsd64"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="netbsd32",
      slavenames=["netbsd32"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="arm",
      slavenames=["hendred-glibc-arm"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="ppc",
      slavenames=["pike-glibc-ppc"],
      factory=factory32))
c['builders'].append(
    BuilderConfig(name="ppc64",
      slavenames=["pike-ppc64"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="mips-o32",
      slavenames=["mips-o32"],
      factory=factorymips))
c['builders'].append(
    BuilderConfig(name="freebsd",
      slavenames=["freebsd"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="freebsd9",
      slavenames=["freebsd9"],
      factory=factory))
c['builders'].append(
    BuilderConfig(name="openbsd",
      slavenames=["openbsd"],
      factory=factoryopen))
c['builders'].append(
    BuilderConfig(name="musl64",
      slavenames=["sabotage"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = False,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8011))

from buildbot.status.mail import MailNotifier
mn = MailNotifier(fromaddr="buildbot@myriabit.eu", lookup="specialbusservice.com", mode="problem")
c['status'].append(mn)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "buildrump.sh"
c['titleURL'] = "https://github.com/rumpkernel/buildrump.sh"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.myriabit.eu:8011/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
